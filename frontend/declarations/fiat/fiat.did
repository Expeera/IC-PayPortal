type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type StatusCode = nat;
type Response_3 = 
 record {
   body: ResponseStatus_3;
   message: text;
   status: bool;
   status_code: StatusCode;
 };
type Response_2 = 
 record {
   body: ResponseStatus_2;
   message: text;
   status: bool;
   status_code: StatusCode;
 };
type Response_1 = 
 record {
   body: ResponseStatus_1;
   message: text;
   status: bool;
   status_code: StatusCode;
 };
type ResponseStatus_3 = 
 variant {
   err: record {};
   success: ConfirmInvoiceBody__1;
 };
type ResponseStatus_2 = 
 variant {
   err: record {};
   success: CreateInvoiceBody__1;
 };
type ResponseStatus_1 = 
 variant {
   err: record {};
   success: vec Invoice;
 };
type ResponseStatus = 
 variant {
   err: record {};
   success: bool;
 };
type Response = 
 record {
   body: ResponseStatus;
   message: text;
   status: bool;
   status_code: StatusCode;
 };
type Item = 
 record {
   id: nat;
   name: text;
   price: float64;
   quantity: int;
 };
type Invoice = 
 record {
   amount: float64;
   createdAt: int;
   currency: text;
   id: nat;
   items: vec Item;
   owner: principal;
   paymentLink: text;
   paymentMethod: text;
   status: text;
   transactionId: text;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type CreateInvoiceBody__1 = 
 record {
   id: nat;
   payment: record {
              redirectUrl: text;
              transactionId: text;
            };
 };
type CreateInvoiceBody = 
 record {
   amount: float64;
   currency: text;
   items: vec Item;
   paymentMethod: text;
 };
type ConfirmInvoiceBody__1 = 
 record {
   invoiceNo: nat;
   paymentMethod: text;
   status: text;
   transactionId: text;
 };
type ConfirmInvoiceBody = 
 record {
   invoiceNo: nat;
   isSuccess: bool;
   paymentMethod: text;
 };
type ConfirmInvoiceAdminBody = 
 record {
   invoiceNo: nat;
   isCompleted: bool;
   paymentMethod: text;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
service : {
  change_invoice_status: (ConfirmInvoiceBody) -> (Response_3);
  change_invoice_status_to_admin: (ConfirmInvoiceAdminBody) -> (Response);
  create_invoice: (CreateInvoiceBody) -> (Response_2);
  getOwner: () -> (text);
  get_actor_id_as_text: () -> (text) query;
  get_all_invoices_to_admin: () -> (Response_1) query;
  get_my_invoices: () -> (Response_1) query;
  invoice_count: () -> (nat) query;
  is_owner: () -> (bool) query;
  setOwner: (text) -> (Response);
  transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
}
